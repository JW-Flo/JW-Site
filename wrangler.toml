name = "jw-site"
compatibility_date = "2025-08-29"

# Cloudflare Pages project build output
pages_build_output_dir = "dist"

[vars]
# Production site URL - update this with your custom domain later
SITE_URL = "https://jw-site-7q2.pages.dev"
# Feature flags & admin keys (set securely in dashboard for production)
# FEATURE_CONSENT_D1 = "true"  # Enable consent D1 persistence
# FEATURE_GEO_CLASSIFICATION = "true" # Enable geo hashing output
# FEATURE_WAITLIST = "true" # Enable waitlist API + widget (requires migration 002_waitlist.sql applied)
# FEATURE_AGENT = "true" # Enable Copilot Agent Mode (agent query API under /api/agent/query)
# CONSENT_ADMIN_KEY = "set-in-dashboard" # Required for /api/admin/consent-stats
# SUPER_ADMIN_KEY is consumed by /api/enhanced-security-scan for super-admin mode.
# Set this in Cloudflare Pages project dashboard (do NOT commit secrets).
# Example: SUPER_ADMIN_KEY = "your-secret-value" (uncomment only for local wrangler dev if needed)
# SUPER_ADMIN_KEY = "dev-super-admin-key"

# If you later add KV / D1 / R2 bindings, document them here.

[[kv_namespaces]]
binding = "RATE_LIMIT"
id = "33fcae0c755840f996bfbb3ca3f9394f"
preview_id = "ec6a2c7250064a89b0fa71accdaf51ba"
# Namespace used for rate limiting buckets (keys rl:*). Previously VISITS; renamed for clarity.

[[d1_databases]]
binding = "DB"
database_name = "guestbook_demo"
database_id = "40c9d6ea-ccb2-4fce-a2d7-339199841004"
# Schema includes guestbook tables and consent_events (see migrations/001_consent_events.sql)

# Turnstile environment variables (set in Pages dashboard, not stored here):
# - TURNSTILE_SECRET_KEY (Secret)
# - PUBLIC_TURNSTILE_SITE_KEY (Build variable)

# Additional KV namespaces for game features
[[kv_namespaces]]
binding = "LEADERBOARD"
id = "4792010013254ed7815b2d66adb9a50e"
preview_id = "508f61d2b5d6442bae53fbe541698360"

[[kv_namespaces]]
binding = "ANALYTICS"
id = "3dd7938561f5402bb41760edda181030"
preview_id = "64323cab0ce447d182e8a5038461e6d3"

# Lightweight metadata persistence for scanner sessions (stores ONLY minimal, non-personal aggregates per consent)
# NOTE: Disabled placeholder binding to prevent deploy failure. Uncomment and set real IDs after creating namespace:
#   wrangler kv:namespace create SCANNER_META --env=production
#   wrangler kv:namespace create SCANNER_META --env=preview
# Then place the resulting ids below.
# [[kv_namespaces]]
# binding = "SCANNER_META"
# id = "<prod-id>"
# preview_id = "<preview-id>"

# Optional: SESSION_SIGNING_KEY (set as secret in Pages dashboard) used to sign ephemeral session cookie
# Do NOT store here; example for local dev only (uncomment if needed)
# [vars]
# SESSION_SIGNING_KEY = "dev-session-signing-key"

# --- Environment Overrides --------------------------------------------------
# Use `wrangler pages dev` or `wrangler dev` locally; deploy with:
#   wrangler pages deploy dist --branch=staging
#   wrangler pages deploy dist --branch=main
# OR specify environments below for workers deploy styles if migrating later.

[env.staging]
vars = { SITE_URL = "https://staging.jw-site.example" }
# Example distinct namespace IDs (create via: wrangler kv:namespace create <NAME> --env=staging)
kv_namespaces = [
	{ binding = "RATE_LIMIT", id = "<staging-rate-limit-id>" },
	{ binding = "LEADERBOARD", id = "<staging-leaderboard-id>" },
	{ binding = "ANALYTICS", id = "<staging-analytics-id>" },
	# Optional scanner metadata KV (create only if enabling persistence)
	# { binding = "SCANNER_META", id = "<staging-scanner-meta-id>" }
]

[env.production]
vars = { SITE_URL = "https://jw-site.example" }
kv_namespaces = [
	{ binding = "RATE_LIMIT", id = "33fcae0c755840f996bfbb3ca3f9394f" },
	{ binding = "LEADERBOARD", id = "4792010013254ed7815b2d66adb9a50e" },
	{ binding = "ANALYTICS", id = "3dd7938561f5402bb41760edda181030" },
	# { binding = "SCANNER_META", id = "<prod-scanner-meta-id>" }
]

# Workflows configuration (implemented as functions for now)
# These will be converted to proper workflows when Cloudflare Workflows supports them
# [[workflows]]
# name = "game-score-processor"
# file = "workflows/game-score-processor.ts"
# binding = "GAME_WORKFLOW"

# [[workflows]]
# name = "guestbook-cleanup"
# file = "workflows/guestbook-cleanup.ts"
# binding = "CLEANUP_WORKFLOW"
