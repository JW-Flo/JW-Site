name = "jw-site"
compatibility_date = "2025-08-29"

# Cloudflare Pages project build output
pages_build_output_dir = "dist"

[vars]
# Production site URL - update this with your custom domain later
SITE_URL = "https://thewanderingwhittle.com"
# Feature flags & admin keys (set securely in dashboard for production)
# FEATURE_CONSENT_D1 = "true"  # Enable consent D1 persistence
# FEATURE_GEO_CLASSIFICATION = "true" # Enable geo hashing output
# FEATURE_WAITLIST = "true" # Enable waitlist API + widget (requires migration 002_waitlist.sql applied)
# FEATURE_AGENT = "true" # Enable Copilot Agent Mode (agent query API under /api/agent/query)
# CONSENT_ADMIN_KEY = "set-in-dashboard" # Required for /api/admin/consent-stats
# SUPER_ADMIN_KEY is consumed by /api/enhanced-security-scan for super-admin mode.
# Set this in Cloudflare Pages project dashboard (do NOT commit secrets).
# Example: SUPER_ADMIN_KEY = "your-secret-value" (uncomment only for local wrangler dev if needed)
# SUPER_ADMIN_KEY = "dev-super-admin-key"

# If you later add KV / D1 / R2 bindings, document them here.

# R2 bucket binding for object storage (MEDIA)
[[r2_buckets]]
binding = "MEDIA"
bucket_name = "jw-site-media"
preview_bucket_name = "jw-site-media-preview"

# Turnstile environment variables (set in Pages dashboard, not stored here):
# - TURNSTILE_SECRET_KEY (Secret)
# - PUBLIC_TURNSTILE_SITE_KEY (Build variable)

# Optional KV namespace for session persistence (Astro Cloudflare adapter logs a warning when missing).
# Create via:
#   wrangler kv:namespace create SESSION
#   wrangler kv:namespace create SESSION --env=production
# Then add produced ids below and uncomment this block.
# [[kv_namespaces]]
# binding = "SESSION"
# id = "<prod-session-namespace-id>"
# preview_id = "<preview-session-namespace-id>"

# Lightweight metadata persistence for scanner sessions (stores ONLY minimal, non-personal aggregates per consent)
# NOTE: Disabled placeholder binding to prevent deploy failure. Uncomment and set real IDs after creating namespace:
#   wrangler kv:namespace create SCANNER_META --env=production
#   wrangler kv:namespace create SCANNER_META --env=preview
# Then place the resulting ids below.
# [[kv_namespaces]]
# binding = "SCANNER_META"
# id = "<prod-id>"
# preview_id = "<preview-id>"

# Optional: SESSION_SIGNING_KEY (set as secret in Pages dashboard) used to sign ephemeral session cookie
# Do NOT store here; example for local dev only (uncomment if needed)
# [vars]
# SESSION_SIGNING_KEY = "dev-session-signing-key"

# --- Environment Overrides --------------------------------------------------
# Use `wrangler pages dev` or `wrangler dev` locally; deploy with:
#   wrangler pages deploy dist --branch=staging
#   wrangler pages deploy dist --branch=main
# OR specify environments below for workers deploy styles if migrating later.

# NOTE: Removed unsupported [env.staging] section for Cloudflare Pages. Pages supports only preview/production.


[env.production]
vars = { SITE_URL = "https://thewhittlewandering.com" }
[[env.production.d1_databases]]
binding = "DB"
database_name = "guestbook_demo"
database_id = "40c9d6ea-ccb2-4fce-a2d7-339199841004"
[[env.production.r2_buckets]]
binding = "MEDIA"
bucket_name = "jw-site-media"
preview_bucket_name = "jw-site-media-preview"
kv_namespaces = [
	{ binding = "RATE_LIMIT", id = "33fcae0c755840f996bfbb3ca3f9394f" },
	{ binding = "LEADERBOARD", id = "4792010013254ed7815b2d66adb9a50e" },
	{ binding = "ANALYTICS", id = "3dd7938561f5402bb41760edda181030" },
]

# Workflows configuration (implemented as functions for now)
# These will be converted to proper workflows when Cloudflare Workflows supports them
# [[workflows]]
# name = "game-score-processor"
# file = "workflows/game-score-processor.ts"
# binding = "GAME_WORKFLOW"

# [[workflows]]
# name = "guestbook-cleanup"
# file = "workflows/guestbook-cleanup.ts"
# binding = "CLEANUP_WORKFLOW"

# -----------------------------------------------------------------------------
# Environment Variable Reference (set in Cloudflare Pages dashboard, not here)
# -----------------------------------------------------------------------------
# Core Secrets:
#   SUPER_ADMIN_KEY                -> Enables super-admin scan mode
#   SESSION_SIGNING_KEY            -> Signs session cookies
#   ROLE_SIGNING_KEY (optional)    -> Separate key for role elevation tokens
#   CONSENT_ADMIN_KEY              -> /api/admin/consent-stats access
#   GEO_HASH_KEY                   -> Stable hashing for geo classification
#   TURNSTILE_SECRET_KEY           -> Turnstile verification
#   NVD_API_KEY                    -> NVD CVE enrichment
#   VIRUSTOTAL_API_KEY             -> Threat intel enrichment
#   OPENCVE_API_TOKEN (optional)   -> OpenCVE token auth (used if no Basic creds)
#   OPENCVE_BASIC_USER / OPENCVE_BASIC_PASSWORD (optional) -> OpenCVE Basic auth (takes precedence)

# Feature Flags (plain text):
#   FEATURE_CONSENT_D1=true
#   FEATURE_GEO_CLASSIFICATION=true
#   FEATURE_WAITLIST=true
#   FEATURE_AGENT=true
#   OPENCVE_ENRICH=true            -> Enables OpenCVE enrichment logic

# Analytics / Research (optional):
#   ANALYTICS_WEBHOOK_URL, ANALYTICS_API_KEY
#   SECURITY_RESEARCH_ENDPOINT, RESEARCH_API_KEY

# Optional scanner metadata KV (minimal aggregated stats): SCANNER_META
# Optional session persistence KV: SESSION

# For local dev you may create a .env (or .dev.vars) with non-production placeholder values.
