---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Guestbook" description="Sign the guestbook after playing games and leave your mark!">
  <div class="max-w-4xl mx-auto">
    <!-- Hero Section -->
    <div class="text-center mb-12">
      <h1 class="text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-blue-400 via-purple-500 to-blue-600 bg-clip-text text-transparent">
        Digital Guestbook
      </h1>
      <p class="text-xl text-slate-300 mb-4">
        Leave your mark after demonstrating your gaming skills!
      </p>
      <div class="bg-blue-500/10 border border-blue-400/30 rounded-lg p-4 max-w-2xl mx-auto">
        <p class="text-blue-300 font-semibold">ðŸŽ® Game Requirement:</p>
                <p class="text-slate-300 text-lg leading-relaxed max-w-3xl mx-auto">
          Sign the guestbook after showcasing your gaming skills! Score 100+ points in any arcade game
          to unlock the ability to leave your mark. Your high scores prove you've experienced
          the interactive portfolio firsthand.
        </p>
      </div>
    </div>

    <!-- Guestbook Form -->
    <div class="bg-slate-800/50 backdrop-blur-sm border border-slate-600 rounded-xl p-8 mb-8">
      <h2 class="text-2xl font-bold text-blue-400 mb-6">Sign the Guestbook</h2>
      
      <form id="guestbook-form" class="space-y-6">
        <div>
          <label for="name" class="block text-sm font-medium text-slate-300 mb-2">
            Your Name (or Gaming Handle)
          </label>
          <input 
            type="text" 
            id="name" 
            name="name" 
            maxlength="40"
            class="w-full px-4 py-3 bg-slate-700/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
            placeholder="Enter your name..."
            required
          />
        </div>

        <div>
          <label for="message" class="block text-sm font-medium text-slate-300 mb-2">
            Your Message
          </label>
          <textarea 
            id="message" 
            name="message" 
            rows="4" 
            maxlength="500"
            class="w-full px-4 py-3 bg-slate-700/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
            placeholder="Share your thoughts about the site, games, or anything else..."
            required
          ></textarea>
          <div class="text-right text-xs text-slate-400 mt-1">
            <span id="char-count">0</span>/500 characters
          </div>
        </div>

        <!-- Turnstile CAPTCHA -->
        <div class="cf-turnstile" data-sitekey="0x4AAAAAAA3SgLSBB3d8WJJr"></div>

        <button 
          type="submit" 
          id="submit-btn"
          class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-slate-800 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Sign Guestbook
        </button>
      </form>

      <!-- Feedback Messages -->
      <div id="feedback" class="mt-4 hidden"></div>
    </div>

    <!-- Guestbook Entries -->
    <div class="bg-slate-800/50 backdrop-blur-sm border border-slate-600 rounded-xl p-8">
      <h2 class="text-2xl font-bold text-blue-400 mb-6 flex items-center">
        <span class="mr-3">ðŸ’¬</span>
        Recent Entries
      </h2>
      
      <div id="guestbook-entries" class="space-y-6" data-state="loading">
        <div id="guestbook-loading" class="text-center text-slate-400 py-8">
          Loading entries...
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<!-- Turnstile Script -->
<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>

<script>
  // Character counter
  const messageTextarea = document.getElementById('message');
  const charCount = document.getElementById('char-count');
  
  messageTextarea?.addEventListener('input', function() {
    const count = this.value.length;
    charCount.textContent = count.toString();
    
    if (count > 450) {
      charCount.classList.add('text-yellow-400');
    } else {
      charCount.classList.remove('text-yellow-400');
    }
  });

  // Load existing entries
  let entries = [];
  
  async function loadEntries() {
    const container = document.getElementById('guestbook-entries');
    const loadingNode = document.getElementById('guestbook-loading');
    if (container) container.dataset.state = 'loading';
    try {
      const response = await fetch('/api/guestbook', { headers: { 'Accept': 'application/json' } });
      if (!response.ok) throw new Error('Non-OK response loading entries');
      entries = await response.json();
      displayEntries();
    } catch (error) {
      console.error('Failed to load entries:', error);
      if (container) {
        container.dataset.state = 'error';
        container.innerHTML = '<div class="text-center text-red-400 py-8">Failed to load entries. <button id="retry-load" class="underline hover:text-red-300">Retry</button></div>';
        document.getElementById('retry-load')?.addEventListener('click', () => {
          container.innerHTML = '<div id="guestbook-loading" class="text-center text-slate-400 py-8">Loading entries...</div>';
          loadEntries();
        });
      }
    } finally {
      if (loadingNode) loadingNode.remove();
    }
  }

  // Form submission
  document.getElementById('guestbook-form')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = document.getElementById('submit-btn');
    const feedback = document.getElementById('feedback');
    const turnstileResponse = document.querySelector('[name="cf-turnstile-response"]')?.value;
    
    if (!turnstileResponse) {
      showFeedback('Please complete the security verification.', 'error');
      return;
    }
    
    const formData = new FormData(this);
    const name = formData.get('name');

    const payload = {
      name: name,
      message: formData.get('message'),
      turnstileToken: turnstileResponse
    };
    
    // Disable form
    submitBtn.disabled = true;
    submitBtn.textContent = 'Submitting...';
    
    try {
      const response = await fetch('/api/guestbook', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      
      const result = await response.json();
      
      if (response.ok) {
        showFeedback('Entry added successfully!', 'success');
        this.reset();
        charCount.textContent = '0';
        loadEntries(); // Reload entries
        
        // Reset Turnstile
        if (window.turnstile) {
          window.turnstile.reset();
        }
      } else {
        // Provide friendlier guidance for score requirement failures
        let message = result.reason || result.error || 'Failed to add entry';
        if (/score requirement/i.test(message)) {
          // Attempt to read any local player-* stats for hint
          const playerKey = `player-${name}`;
          try {
            const statsRaw = window.localStorage.getItem(playerKey);
            if (statsRaw) {
              const stats = JSON.parse(statsRaw);
              const best = stats.bestScore || 0;
              if (best < 100) {
                message += ` â€” Your best recorded score is ${best}. Score 100+ points in any game, then try again.`;
              }
            } else {
              message += ' â€” Play a game and score 100+ points first.';
            }
          } catch(_) { /* ignore */ }
        }
        showFeedback(message, 'error');
      }
      
    } catch (error) {
      console.error('Error submitting:', error);
      showFeedback('Network error. Please try again.', 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Sign Guestbook';
    }
  });

  function showFeedback(message, type) {
    const feedback = document.getElementById('feedback');
    if (!feedback) return;
    
    feedback.className = `mt-4 p-4 rounded-lg ${
      type === 'success' 
        ? 'bg-green-500/10 border border-green-400/30 text-green-300' 
        : 'bg-red-500/10 border border-red-400/30 text-red-300'
    }`;
    feedback.textContent = message;
    feedback.classList.remove('hidden');
    
    setTimeout(() => {
      feedback.classList.add('hidden');
    }, 5000);
  }

  function displayEntries() {
    const container = document.getElementById('guestbook-entries');
    if (!container) return;
    container.dataset.state = 'loaded';
    
    if (!entries || entries.length === 0) {
      container.innerHTML = '<div class="text-center text-slate-400 py-8">No entries yet. Be the first to sign!</div>';
      return;
    }
    
    container.innerHTML = entries.map(entry => `
      <div class="bg-slate-700/30 rounded-lg p-6 border border-slate-600/50">
        <div class="flex justify-between items-start mb-3">
          <h3 class="text-blue-300 font-semibold text-lg">${escapeHtml(entry.name)}</h3>
          <span class="text-slate-400 text-sm">${formatDate(entry.created_at)}</span>
        </div>
        <p class="text-slate-200 leading-relaxed">${escapeHtml(entry.message)}</p>
      </div>
    `).join('');
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function formatDate(timestamp) {
    const date = new Date(parseInt(timestamp));
    return date.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  // Load entries on page load
  loadEntries();
</script>

<style>
  /* Custom styles for better form appearance */
  .cf-turnstile {
    display: flex;
    justify-content: center;
    margin: 1rem 0;
  }
</style>
</BaseLayout>
