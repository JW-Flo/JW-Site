---
import SEO from '../components/SEO.astro';
import CookieConsent from '../components/CookieConsent.astro';
// import IPTracker from '../components/IPTracker.astro';
import '../styles/global.css';
export interface Props { title?: string; description?: string; url?: string; noIndex?: boolean; }
const { title, description, url, noIndex } = Astro.props as Props;
---
<html lang="en" class="scroll-smooth dark">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta name="color-scheme" content="dark" />
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="Permissions-Policy" content="geolocation=(), microphone=(), camera=()" />
    <SEO {title} {description} {url} noIndex={noIndex} />
  </head>
  <body class="flex flex-col min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-slate-100">
    <!-- Game Canvas Overlay -->
    <canvas id="game-canvas" class="fixed inset-0 pointer-events-none z-30 opacity-0 transition-opacity duration-1000 cursor-pointer bg-black/80"></canvas>
    
    <!-- IP Tracker Component -->
    <!-- <IPTracker /> -->
    
    <!-- Interactive Demo Trigger -->
          <div class="game-trigger-container">
        <button 
          id="game-trigger" 
          class="game-trigger-button" 
          aria-label="Launch Retro Arcade"
          title="Click to play retro games!"
        >
          üéÆ
        </button>
      </div>
      
      <!-- Security Scanner Link -->
      <div class="fixed top-20 right-4 z-50">
        <a 
          href="/security-scanner"
          class="bg-red-600 hover:bg-red-700 text-white p-3 rounded-full shadow-lg transition-all duration-300 transform hover:scale-110 flex items-center gap-2 text-sm font-medium"
          title="Security Scanner Tool"
        >
          üõ°Ô∏è Scan
        </a>
      </div>
    
    <!-- Enhanced Professional Leaderboard -->
    <div id="leaderboard" class="fixed top-6 right-6 bg-slate-800/95 backdrop-blur-sm border border-slate-600 rounded-xl p-6 opacity-0 transition-all duration-500 z-40 max-w-sm shadow-2xl shadow-slate-900/50">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-blue-400 font-bold text-lg flex items-center">
          üèÜ Arcade Leaderboard
        </h3>
        <button id="close-leaderboard" class="text-slate-400 hover:text-red-400 text-xl font-bold">√ó</button>
      </div>
      <div id="leaderboard-list" class="text-sm space-y-2 max-h-64 overflow-y-auto">
        <!-- Leaderboard entries will be populated by JavaScript -->
      </div>
    </div>
    
    <!-- Compact Dynamic Navigation -->
    <nav class="bg-slate-900/95 backdrop-blur-sm border-b border-slate-600 px-4 md:px-8 py-3 relative z-40 shadow-lg shadow-slate-900/50">
      <div class="flex justify-between items-center max-w-7xl mx-auto">
        <a href="/" class="text-cyan-400 hover:text-green-400 transition-colors duration-200 font-bold text-lg tracking-wide">Joe Whittle</a>
        <div class="hidden md:flex space-x-6 relative z-50">
          <a href="/projects" class="text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-1 rounded-md hover:bg-slate-800/50 text-sm">Projects</a>
          <a href="/workflows" class="text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-1 rounded-md hover:bg-slate-800/50 text-sm">Workflows</a>
          <a href="/about" class="text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-1 rounded-md hover:bg-slate-800/50 text-sm">About</a>
          <a href="/resume" class="text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-1 rounded-md hover:bg-slate-800/50 text-sm">Resume</a>
          <a href="/guestbook" class="text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-1 rounded-md hover:bg-slate-800/50 text-sm">Guestbook</a>
          <a href="/contact" class="text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-1 rounded-md hover:bg-slate-800/50 text-sm">Contact</a>
        </div>
        <!-- Mobile menu button -->
        <button id="mobile-menu-btn" class="md:hidden text-slate-300 hover:text-blue-400">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
      <!-- Mobile menu -->
      <div id="mobile-menu" class="hidden md:hidden mt-4 pb-4 space-y-2">
        <a href="/projects" class="block text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-2 rounded-md hover:bg-slate-800/50 text-sm">Projects</a>
        <a href="/workflows" class="block text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-2 rounded-md hover:bg-slate-800/50 text-sm">Workflows</a>
        <a href="/about" class="block text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-2 rounded-md hover:bg-slate-800/50 text-sm">About</a>
        <a href="/resume" class="block text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-2 rounded-md hover:bg-slate-800/50 text-sm">Resume</a>
        <a href="/guestbook" class="block text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-2 rounded-md hover:bg-slate-800/50 text-sm">Guestbook</a>
        <a href="/contact" class="block text-slate-300 hover:text-blue-400 transition-all duration-200 font-medium nav-link px-2 py-2 rounded-md hover:bg-slate-800/50 text-sm">Contact</a>
      </div>
    </nav>
    <main class="flex-1 p-4 md:p-8 max-w-7xl mx-auto w-full">
      <slot />
    </main>
    <!-- Enhanced Professional Footer -->
    <footer class="bg-slate-900/95 backdrop-blur-sm border-t border-slate-600 p-8 text-center shadow-lg shadow-slate-900/50">
      <div class="max-w-4xl mx-auto">
        <p class="text-slate-300 mb-3 font-medium">&copy; {new Date().getFullYear()} Joe Whittle. All rights reserved.</p>
        <p class="text-slate-400 text-sm mb-6">Built with Astro & Tailwind. Modern & performant.</p>
        <div class="flex flex-col sm:flex-row justify-center space-y-3 sm:space-y-0 sm:space-x-8">
          <a href="https://github.com/JW-Flo" class="text-blue-400 hover:text-blue-300 transition-colors duration-200 flex items-center justify-center space-x-2">
            <span>GitHub</span>
          </a>
          <a href="https://www.linkedin.com/in/joseph-whittle-9920537b/" class="text-blue-400 hover:text-blue-300 transition-colors duration-200 flex items-center justify-center space-x-2">
            <span>LinkedIn</span>
          </a>
        </div>
      </div>
    </footer>
    
    <!-- Inline client script for proper bundling -->
    <script type="module">
      // Retro arcade client script
      class RetroArcade {
        constructor() {
          // Ensure canvas exists
          this.canvas = document.getElementById("game-canvas");
          if (!this.canvas) {
            console.error("‚ùå Game canvas not found!");
            return;
          }

          this.triggerWord = document.getElementById("trigger-word");
          this.leaderboard = document.getElementById("leaderboard");
          this.leaderboardList = document.getElementById("leaderboard-list");
          this.closeLeaderboardBtn = document.getElementById("close-leaderboard");

          this.gameOverlay = null;
          this.isActive = false;

          this.bindEvents();
          console.log("üéØ Retro Arcade initialized - modular architecture ready!");
        }

        bindEvents() {
          // Trigger word activation - bind to both span and parent div for better UX
          const triggerElement = this.triggerWord || document.getElementById("trigger-word");
          const triggerContainer = document.getElementById("game-trigger");

          if (triggerElement) {
            triggerElement.addEventListener("click", (e) => {
              e.preventDefault();
              e.stopPropagation();
              console.log("üéØ Game trigger clicked!");
              this.activateGame();
            });
          }

          if (triggerContainer) {
            triggerContainer.addEventListener("click", (e) => {
              e.preventDefault();
              e.stopPropagation();
              console.log("üéØ Game trigger container clicked!");
              this.activateGame();
            });
          }

          // Leaderboard controls
          if (this.closeLeaderboardBtn) {
            this.closeLeaderboardBtn.addEventListener("click", () => {
              this.hideLeaderboard();
            });
          }
        }

        async activateGame() {
          if (this.isActive) {
            console.log("üéØ Game already active, ignoring trigger");
            return;
          }

          console.log("üéØ Activating game...");

          try {
            this.isActive = true;
            this.canvas.style.pointerEvents = "auto";
            this.canvas.style.opacity = "0.8";
            this.canvas.style.zIndex = "35"; // Above navigation but below modal elements
            if (this.triggerWord) this.triggerWord.style.opacity = "0";

            // Apply enhanced retro styling for game mode
            document.body.classList.add("game-mode");

            console.log("üéØ Importing GameOverlay...");
            // Initialize modular game overlay with proper import
            const module = await import("/GameOverlay.js");
            const GameOverlay = module.GameOverlay;
            console.log("üéØ GameOverlay imported successfully");

            this.gameOverlay = new GameOverlay(this.canvas);

            // Set up deactivation callback to properly clean up
            this.gameOverlay.onDeactivate = () => {
              this.deactivateGame();
            };

            console.log("üéØ Activating GameOverlay...");
            await this.gameOverlay.activate();

            this.showLeaderboard();
            console.log("üéÆ Retro Arcade activated - enhanced game mode!");
          } catch (error) {
            console.error("‚ùå Failed to activate game:", error);
            // Reset state on error
            this.isActive = false;
            this.canvas.style.pointerEvents = "none";
            this.canvas.style.opacity = "0";
            this.canvas.style.zIndex = "30";
            if (this.triggerWord) {
              this.triggerWord.style.opacity = "0.3";
            }
            document.body.classList.remove("game-mode");

            // Show error message to user with more details
            const errorMsg = `Sorry, there was an issue loading the game: ${error.message}. Please check the console for details.`;
            window.alert(errorMsg);
            
            // Also add a visual error indicator on the trigger
            const trigger = document.getElementById("game-trigger");
            if (trigger) {
              trigger.innerHTML = `<div class="flex items-center space-x-2"><span class="text-2xl">‚ùå</span><div><div class="font-bold">Game Error</div><div class="text-xs opacity-80">Check console</div></div></div>`;
              trigger.className = trigger.className.replace("from-blue-600 via-blue-500 to-purple-600", "from-red-600 via-red-500 to-red-600");
            }
          }
        }

        deactivateGame() {
          if (!this.isActive) return;

          this.isActive = false;
          this.canvas.style.pointerEvents = "none";
          this.canvas.style.opacity = "0";
          this.canvas.style.zIndex = "30"; // Back to normal z-index
          if (this.triggerWord) this.triggerWord.style.opacity = "0.3";

          // Remove enhanced game mode styling
          document.body.classList.remove("game-mode");

          if (this.gameOverlay) {
            this.gameOverlay.deactivate();
            this.gameOverlay = null;
          }

          this.hideLeaderboard();
          console.log("Game deactivated successfully");
        }

        showLeaderboard() {
          if (this.gameOverlay) {
            this.gameOverlay.showLeaderboard();
          }
        }

        hideLeaderboard() {
          if (this.gameOverlay) {
            this.gameOverlay.hideLeaderboard();
          }
        }
      }

      // Initialize when DOM is ready and expose for testing
      document.addEventListener("DOMContentLoaded", () => {
        try {
          window.retroArcade = new RetroArcade();
          // Add visible confirmation that script loaded
          console.log("üéØ RetroArcade initialized successfully!");
          
          // Add a small visual indicator in the page title for testing
          setTimeout(() => {
            if (window.retroArcade && window.retroArcade.canvas) {
              document.title = "üéÆ " + document.title;
            }
          }, 1000);
        } catch (e) {
          console.error("Failed to initialize RetroArcade for testing", e);
          // Add error indicator
          setTimeout(() => {
            document.title = "‚ùå " + document.title;
          }, 1000);
        }

        // Mobile menu functionality
        const mobileMenuBtn = document.getElementById('mobile-menu-btn');
        const mobileMenu = document.getElementById('mobile-menu');
        
        if (mobileMenuBtn && mobileMenu) {
          mobileMenuBtn.addEventListener('click', () => {
            mobileMenu.classList.toggle('hidden');
          });
        }
      });
    </script>
    
    <!-- Dev easter eggs script -->
    <script type="module" src="/src/scripts/dev-easter-eggs.client.js"></script>
    
    <!-- Cookie Consent -->
    <CookieConsent />
  </body>
</html>
