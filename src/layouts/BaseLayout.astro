---
import SEO from '../components/SEO.astro';
import '../styles/global.css';
export interface Props { title?: string; description?: string; url?: string; noIndex?: boolean; }
const { title, description, url, noIndex } = Astro.props as Props;
---
<html lang="en" class="scroll-smooth dark">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta name="color-scheme" content="dark" />
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="Permissions-Policy" content="geolocation=(), microphone=(), camera=()" />
    <SEO {title} {description} {url} noIndex={noIndex} />
  </head>
  <body class="flex flex-col min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-slate-100">
    <!-- Game Canvas Overlay -->
    <canvas id="game-canvas" class="fixed inset-0 pointer-events-none z-30 opacity-0 transition-opacity duration-1000 cursor-pointer bg-black/80"></canvas>
    
    <!-- Enhanced Retro Trigger - More Prominent -->
    <div id="game-trigger" class="fixed bottom-6 right-6 bg-gradient-to-r from-neon-cyan to-neon-pink text-black px-4 py-3 rounded-lg font-bold text-sm cursor-pointer transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-neon z-30 border-2 border-neon-yellow">
      üéÆ Ready to explore <span id="trigger-word" class="underline">retro arcade</span>?
    </div>
    
    <!-- Enhanced Retro Leaderboard -->
    <div id="leaderboard" class="fixed top-6 right-6 bg-slate-800/95 backdrop-blur border-2 border-blue-500 rounded-xl p-6 opacity-0 transition-all duration-500 z-30 max-w-sm shadow-2xl">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-blue-400 font-bold text-lg flex items-center">
          üèÜ Arcade Leaderboard
        </h3>
        <button id="close-leaderboard" class="text-slate-400 hover:text-red-400 text-xl font-bold">√ó</button>
      </div>
      <div id="leaderboard-list" class="text-sm space-y-2 max-h-64 overflow-y-auto">
        <!-- Leaderboard entries will be populated by JavaScript -->
      </div>
    </div>
    
    <!-- Professional Navigation -->
    <nav class="bg-slate-800/90 backdrop-blur border-b border-slate-700 px-4 md:px-8 py-4 relative z-40">
      <div class="flex justify-between items-center max-w-7xl mx-auto">
        <a href="/" class="text-blue-400 hover:text-blue-300 transition font-bold text-xl">Joe Whittle</a>
        <div class="flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-8 relative z-50">
          <a href="/projects" class="text-slate-300 hover:text-blue-400 transition-colors duration-200 font-medium nav-link">Projects</a>
          <a href="/about" class="text-slate-300 hover:text-blue-400 transition-colors duration-200 font-medium nav-link">About</a>
          <a href="/resume" class="text-slate-300 hover:text-blue-400 transition-colors duration-200 font-medium nav-link">Resume</a>
          <a href="/contact" class="text-slate-300 hover:text-blue-400 transition-colors duration-200 font-medium nav-link">Contact</a>
        </div>
      </div>
    </nav>
    <main class="flex-1 p-4 md:p-8">
      <slot />
    </main>
    <!-- Professional Footer -->
    <footer class="bg-slate-800/90 backdrop-blur border-t border-slate-700 p-6 text-center">
      <p class="text-slate-300 mb-2">&copy; {new Date().getFullYear()} Joe Whittle. All rights reserved.</p>
      <p class="text-slate-400 text-sm mb-4">Built with Astro & Tailwind. Modern & performant.</p>
      <div class="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-6">
        <a href="https://github.com/JW-Flo" class="text-blue-400 hover:text-blue-300 transition-colors duration-200">GitHub</a>
        <a href="https://www.linkedin.com/in/joseph-whittle-9920537b/" class="text-blue-400 hover:text-blue-300 transition-colors duration-200">LinkedIn</a>
      </div>
    </footer>
    
    <!-- Inline client script for proper bundling -->
    <script type="module">
      // Retro arcade client script
      class RetroArcade {
        constructor() {
          // Ensure canvas exists
          this.canvas = document.getElementById("game-canvas");
          if (!this.canvas) {
            console.error("‚ùå Game canvas not found!");
            return;
          }

          this.triggerWord = document.getElementById("trigger-word");
          this.leaderboard = document.getElementById("leaderboard");
          this.leaderboardList = document.getElementById("leaderboard-list");
          this.closeLeaderboardBtn = document.getElementById("close-leaderboard");

          this.gameOverlay = null;
          this.isActive = false;

          this.bindEvents();
          console.log("üéØ Retro Arcade initialized - modular architecture ready!");
        }

        bindEvents() {
          // Trigger word activation - bind to both span and parent div for better UX
          const triggerElement = this.triggerWord || document.getElementById("trigger-word");
          const triggerContainer = document.getElementById("game-trigger");

          if (triggerElement) {
            triggerElement.addEventListener("click", (e) => {
              e.preventDefault();
              e.stopPropagation();
              console.log("üéØ Game trigger clicked!");
              this.activateGame();
            });
          }

          if (triggerContainer) {
            triggerContainer.addEventListener("click", (e) => {
              e.preventDefault();
              e.stopPropagation();
              console.log("üéØ Game trigger container clicked!");
              this.activateGame();
            });
          }

          // Leaderboard controls
          if (this.closeLeaderboardBtn) {
            this.closeLeaderboardBtn.addEventListener("click", () => {
              this.hideLeaderboard();
            });
          }
        }

        async activateGame() {
          if (this.isActive) {
            console.log("üéØ Game already active, ignoring trigger");
            return;
          }

          console.log("üéØ Activating game...");

          try {
            this.isActive = true;
            this.canvas.style.pointerEvents = "auto";
            this.canvas.style.opacity = "0.8";
            this.canvas.style.zIndex = "35"; // Above navigation but below modal elements
            if (this.triggerWord) this.triggerWord.style.opacity = "0";

            // Apply enhanced retro styling for game mode
            document.body.classList.add("game-mode");

            console.log("üéØ Importing GameOverlay...");
            // Initialize modular game overlay with proper import
            const module = await import("/GameOverlay.js");
            const GameOverlay = module.GameOverlay;
            console.log("üéØ GameOverlay imported successfully");

            this.gameOverlay = new GameOverlay(this.canvas);

            // Set up deactivation callback to properly clean up
            this.gameOverlay.onDeactivate = () => {
              this.deactivateGame();
            };

            console.log("üéØ Activating GameOverlay...");
            await this.gameOverlay.activate();

            this.showLeaderboard();
            console.log("üéÆ Retro Arcade activated - enhanced game mode!");
          } catch (error) {
            console.error("‚ùå Failed to activate game:", error);
            // Reset state on error
            this.isActive = false;
            this.canvas.style.pointerEvents = "none";
            this.canvas.style.opacity = "0";
            this.canvas.style.zIndex = "30";
            if (this.triggerWord) {
              this.triggerWord.style.opacity = "0.3";
            }
            document.body.classList.remove("game-mode");

            // Show error message to user
            window.alert("Sorry, there was an issue loading the game. Please try again or check the console for details.");
          }
        }

        deactivateGame() {
          if (!this.isActive) return;

          this.isActive = false;
          this.canvas.style.pointerEvents = "none";
          this.canvas.style.opacity = "0";
          this.canvas.style.zIndex = "30"; // Back to normal z-index
          if (this.triggerWord) this.triggerWord.style.opacity = "0.3";

          // Remove enhanced game mode styling
          document.body.classList.remove("game-mode");

          if (this.gameOverlay) {
            this.gameOverlay.deactivate();
            this.gameOverlay = null;
          }

          this.hideLeaderboard();
          console.log("Game deactivated successfully");
        }

        showLeaderboard() {
          if (this.gameOverlay) {
            this.gameOverlay.showLeaderboard();
          }
        }

        hideLeaderboard() {
          if (this.gameOverlay) {
            this.gameOverlay.hideLeaderboard();
          }
        }
      }

      // Initialize when DOM is ready and expose for testing
      document.addEventListener("DOMContentLoaded", () => {
        try {
          window.retroArcade = new RetroArcade();
        } catch (e) {
          console.error("Failed to initialize RetroArcade for testing", e);
        }
      });
    </script>
    
    <!-- Dev easter eggs script -->
    <script type="module" src="/src/scripts/dev-easter-eggs.client.js"></script>
  </body>
</html>
