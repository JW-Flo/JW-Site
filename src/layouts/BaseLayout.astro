---
import SEO from '../components/SEO.astro';
import { siteMeta } from '../data/siteMeta';
import '../styles/global.css';
export interface Props { title?: string; description?: string; url?: string; noIndex?: boolean; }
const { title, description, url, noIndex } = Astro.props as Props;
---
<html lang="en" class="scroll-smooth dark">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta name="color-scheme" content="dark" />
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="Permissions-Policy" content="geolocation=(), microphone=(), camera=()" />
    <SEO {title} {description} {url} noIndex={noIndex} />
  </head>
  <body class="flex flex-col min-h-screen bg-dark text-white">
    <!-- Game Canvas Overlay -->
    <canvas id="game-canvas" class="fixed inset-0 pointer-events-none z-50 opacity-0 transition-opacity duration-1000 cursor-pointer" style="background: rgba(0, 0, 0, 0.1);"></canvas>
    
    <!-- Professional Trigger Phrase -->
    <div id="game-trigger" class="fixed bottom-4 right-4 text-xs text-slate-400 hover:text-blue-400 transition-colors duration-300 cursor-pointer opacity-30 hover:opacity-100 z-30">
      Ready to explore <span id="trigger-word" class="font-bold underline">technical</span> demonstrations?
    </div>
    
    <!-- Professional Leaderboard -->
    <div id="leaderboard" class="fixed top-4 right-4 bg-slate-800 border border-blue-500 rounded-lg p-4 opacity-0 transition-opacity duration-500 z-30 max-w-xs">
      <h3 class="text-blue-400 font-bold mb-2">üèÜ Technical Demonstrations</h3>
      <div id="leaderboard-list" class="text-sm space-y-1">
        <!-- Leaderboard entries will be populated by JavaScript -->
      </div>
      <button id="close-leaderboard" class="mt-2 text-xs text-slate-400 hover:text-blue-400">√ó Close</button>
    </div>
    
    <!-- Professional Navigation -->
    <nav class="bg-slate-900 border-b border-blue-500 px-8 py-4">
      <div class="flex justify-between items-center max-w-7xl mx-auto">
        <a href="/" class="text-blue-400 hover:text-blue-300 transition font-bold text-lg">Joe Whittle</a>
        <div class="flex space-x-6">
          <a href="/projects" class="text-slate-300 hover:text-blue-400 transition">Projects</a>
          <a href="/about" class="text-slate-300 hover:text-blue-400 transition">Bio</a>
          <a href="/resume" class="text-slate-300 hover:text-blue-400 transition">Resume</a>
          <a href="/contact" class="text-slate-300 hover:text-blue-400 transition">Contact</a>
        </div>
      </div>
    </nav>
    <main class="flex-1 p-8">
      <slot />
    </main>
    <!-- Footer -->
    <footer class="bg-dark border-t border-neon-blue p-4 text-center text-sm">
      <p class="text-neon-pink">&copy; {new Date().getFullYear()} Joe Whittle. All rights reserved.</p>
      <p class="text-slate-400">Built with Astro & Tailwind. Edgy & performant.</p>
      <div class="flex justify-center space-x-4 mt-2">
        <a href="https://github.com/JW-Flo" class="text-neon-blue hover:text-neon-green transition">GitHub</a>
        <a href="https://www.linkedin.com/in/joseph-whittle-9920537b/" class="text-neon-blue hover:text-neon-green transition">LinkedIn</a>
      </div>
    </footer>
    
    <!-- Game Script - Modular Architecture -->
    <script>
      class RetroArcade {
        constructor() {
          this.canvas = document.getElementById('game-canvas');
          this.triggerWord = document.getElementById('trigger-word');
          this.leaderboard = document.getElementById('leaderboard');
          this.leaderboardList = document.getElementById('leaderboard-list');
          this.closeLeaderboardBtn = document.getElementById('close-leaderboard');
          
          this.gameOverlay = null;
          this.isActive = false;
          
          this.bindEvents();
          console.log('üéØ Retro Arcade initialized - modular architecture ready!');
        }
        
        bindEvents() {
          // Trigger word activation
          this.triggerWord.addEventListener('click', (e) => {
            e.preventDefault();
            this.activateGame();
          });
          
          // Leaderboard controls
          this.closeLeaderboardBtn.addEventListener('click', () => {
            this.hideLeaderboard();
          });
        }
        
        async activateGame() {
          if (this.isActive) return;
          
          this.isActive = true;
          this.canvas.style.pointerEvents = 'auto';
          this.canvas.style.opacity = '0.8';
          this.triggerWord.style.opacity = '0';
          
          // Apply retro styling to the entire page
          document.body.classList.add('retro-active');
          
          // Initialize modular game overlay
          const { GameOverlay } = await import('../components/GameOverlay.js');
          this.gameOverlay = new GameOverlay(this.canvas);
          
          // Set up deactivation callback to properly clean up
          this.gameOverlay.onDeactivate = () => {
            this.deactivateGame();
          };
          
          await this.gameOverlay.activate();
          
          this.showLeaderboard();
          console.log('üéÆ Retro Arcade activated - modular system!');
        }
        
        deactivateGame() {
          if (!this.isActive) return;
          
          this.isActive = false;
          this.canvas.style.pointerEvents = 'none';
          this.canvas.style.opacity = '0';
          this.triggerWord.style.opacity = '0.3';
          
          // Remove retro styling from the entire page
          document.body.classList.remove('retro-active');
          
          if (this.gameOverlay) {
            this.gameOverlay.deactivate();
            this.gameOverlay = null;
          }
          
          this.hideLeaderboard();
          console.log('Game deactivated successfully');
        }
        
        showLeaderboard() {
          if (this.gameOverlay) {
            this.gameOverlay.showLeaderboard();
          }
        }
        
        hideLeaderboard() {
          if (this.gameOverlay) {
            this.gameOverlay.hideLeaderboard();
          }
        }
      }
      
      // Initialize when DOM is ready
      document.addEventListener('DOMContentLoaded', () => {
        new RetroArcade();
      });
    </script>
  </body>
</html>
